{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times{\*\falt Times New Roman};}{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica{\*\falt Arial};}
{\f23\froman\fcharset128\fprq1{\*\panose 00000000000000000000}MS Mincho{\*\falt ?? ??};}{\f27\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f157\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}Miriam{\*\falt Times New Roman};}
{\f158\froman\fcharset128\fprq1{\*\panose 00000000000000000000}@MS Mincho;}{\f159\froman\fcharset238\fprq2 Times New Roman CE;}{\f160\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f162\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f163\froman\fcharset162\fprq2 Times New Roman Tur;}{\f164\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f165\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f166\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f167\fswiss\fcharset238\fprq2 Arial CE;}{\f168\fswiss\fcharset204\fprq2 Arial Cyr;}{\f170\fswiss\fcharset161\fprq2 Arial Greek;}{\f171\fswiss\fcharset162\fprq2 Arial Tur;}{\f172\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f173\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f174\fswiss\fcharset186\fprq2 Arial Baltic;}{\f175\fmodern\fcharset238\fprq1 Courier New CE;}{\f176\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f178\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f179\fmodern\fcharset162\fprq1 Courier New Tur;}{\f180\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f181\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f182\fmodern\fcharset186\fprq1 Courier New Baltic;}
{\f375\fswiss\fcharset238\fprq2 Tahoma CE;}{\f376\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f378\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f379\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f380\fswiss\fcharset177\fprq2 Tahoma (Hebrew);}
{\f381\fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f382\fswiss\fcharset186\fprq2 Tahoma Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\s1\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 1;}{\s2\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl1\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext0 heading 2;}{\s3\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl2\outlinelevel1\adjustright\rin0\lin0\itap0 
\i\fs22\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 \sbasedon2 \snext0 heading 3;}{\s4\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl3\outlinelevel2\adjustright\rin0\lin0\itap0 
\i\fs22\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 \sbasedon3 \snext0 heading 4;}{\s5\ql \li0\ri0\sb40\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl4\adjustright\rin0\lin0\itap0 \i\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon24 \snext0 heading 5;}{\s6\qj \li0\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl5\adjustright\rin0\lin0\itap0 \i\f1\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 6;}{
\s7\qj \li0\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl6\adjustright\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 7;}{
\s8\qj \li0\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl7\adjustright\rin0\lin0\itap0 \i\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 8;}{
\s9\qj \li0\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl8\adjustright\rin0\lin0\itap0 \i\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 \additive 
\f0\fs18\super \sbasedon10 footnote reference;}{\s16\qc \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext16 Author;}{
\s17\qc \li0\ri0\sa120\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\f5\fs36\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext17 Paper-Title;}{
\s18\qc \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext18 Affiliations;}{
\s19\qj \fi-144\li144\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext19 footnote text;}{\s20\qj \fi-144\li144\ri0\sa80\widctlpar{\*\pn 
\pnlvlblt\ilvl10\ls2047\pnrnot0\pnf4\pnstart1\pnindent360\pnhang{\pntxtb ?}}\aspalpha\aspnum\faauto\ls2047\ilvl10\adjustright\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext20 Bullet;}{
\s21\qj \li0\ri0\sa80\widctlpar\tqc\tx4320\tqr\tx8640\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext21 footer;}{
\s22\qc \li0\ri0\sa60\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext22 E-Mail;}{\s23\ql \li0\ri0\sb40\keepn\widctlpar{\*\pn \pnlvlbody\ilvl0\ls2047\pnrnot0
\pndec\pnf1 }\aspalpha\aspnum\faauto\ls2047\adjustright\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext23 Abstract;}{\s24\qj \fi-360\li1080\ri0\sa80\widctlpar{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0
\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\aspalpha\aspnum\faauto\ls2047\ilvl11\adjustright\rin0\lin1080\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext24 List Number 3;}{
\s25\qc \li0\ri0\sa80\widctlpar\posyb\absh-2160\absw4680\abslock1\dxfrtext187\dfrmtxtx187\dfrmtxty0\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext25 Captions;}{
\s26\qj \fi-360\li360\ri0\sa80\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\aspalpha\aspnum\faauto\ls2\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext26 References;}{\*\cs27 
\additive \sbasedon10 page number;}{\s28\qj \fi360\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext28 Body Text 2;}{
\s29\qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \cbpat9 \f27\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext29 Document Map;}{
\s30\qc \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\fs18\lang1033\langfe3081\cgrid\langnp1033\langfenp3081 \sbasedon0 \snext0 caption;}{\*\cs31 \additive \ul\cf2 \sbasedon10 Hyperlink;}{
\s32\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext32 Plain Text;}{\*\cs33 \additive \ul\cf12 \sbasedon10 FollowedHyperlink;}{\*\cs34 \additive 
\f1\fs16 \sbasedon10 code;}}{\*\listtable{\list\listtemplateid-1{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1 \s1}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers\'01\'03;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s2}
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s3}{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s4}{\listlevel\levelnfc0\levelnfcn0
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s5}{\listlevel\levelnfc0\levelnfcn0
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s6}{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s7}
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1 \s8}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers
\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s9}{\listname ;}\listid-5}{\list\listtemplateid1188963258\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\leveltemplateid67698703\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li720\jclisttab\tx720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'01.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li2160\jclisttab\tx2160 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'04.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li4320\jclisttab\tx4320 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'07.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'08.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li6480\jclisttab\tx6480 }{\listname ;}\listid327443306}{\list\listtemplateid2109927540\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'03[\'00];}{\levelnumbers\'02;}\f0\fs20\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \s26\fi-360\li360\jclisttab\tx360 }
{\listname ;}\listid1864198689}}{\*\listoverridetable{\listoverride\listid-5\listoverridecount0\ls1}{\listoverride\listid1864198689\listoverridecount0\ls2}{\listoverride\listid327443306\listoverridecount0\ls3}}{\info{\title Proceedings Template - WORD}
{\author End User Computing Services}{\operator Dawn Haney}{\creatim\yr2000\mo7\dy13\hr4\min12}{\revtim\yr2000\mo7\dy13\hr4\min12}{\printim\yr2000\mo7\dy11\hr13\min22}{\version2}{\edmins0}{\nofpages5}{\nofwords3344}{\nofchars19061}{\*\company ACM}
{\nofcharsws23408}{\vern8247}}\margl1080\margr1080 \widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\lytprtmet\formshade\horzdoc\dghspace180\dgvspace180\dghorigin1701\dgvorigin1984\dghshow0\dgvshow0
\jexpand\viewkind1\viewscale75\pgbrdrhead\pgbrdrfoot\bdrrlswsix\nolnhtadjtbl \fet0\sectd \psz1\linex0\endnhere\sectdefaultcl {\footer \pard\plain \s21\qj \li0\ri0\sa80\widctlpar
\tqc\tx4320\tqr\tx8640\pvpara\phmrg\posxc\posy0\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field{\*\fldinst {\cs27 PAGE  }}{\fldrslt {\cs27\lang1024\langfe1024\noproof 3}}}{\cs27 
\par }\pard \s21\qj \li0\ri0\sa80\widctlpar\tqc\tx4320\tqr\tx8640\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s17\qc \li0\ri0\sa60\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\b\f5\fs36\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Biopython: Python tools for computational biology
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\sect }\sectd \psz1\sbknone\linex0\cols3\colsx0\endnhere\sectdefaultcl \pard\plain 
\s16\qc \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\expnd0\expndtw-2 Brad Chapman
\par }\pard\plain \s18\qc \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\expnd0\expndtw-2 University of Georgia\line Rm 162, Riverbend Research Lab\line Athens, GA 30602
\line (706) 583-0161
\par }\pard\plain \s22\qc \li0\ri0\sa60\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\expnd0\expndtw-2 chapmanb@arches.uga.edu
\par }\pard\plain \s16\qc \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\expnd0\expndtw-2 \column Jeffrey Chang
\par }\pard\plain \s18\qc \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\expnd0\expndtw-2 2nd author's affiliation\line 1st line of address\line 2nd line of address\line 
Telephone number, incl. country code
\par }\pard\plain \s22\qc \li0\ri0\sa60\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\expnd0\expndtw-2 2nd E-mail
\par }\pard\plain \s16\qc \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\expnd0\expndtw-2 \column 3rd Author
\par }\pard\plain \s18\qc \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\expnd0\expndtw-2 3rd author's affiliation\line 1st line of address\line 2nd line of address\line 
Telephone number, incl. country code
\par }\pard\plain \s22\qc \li0\ri0\sa60\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f5\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\expnd0\expndtw-2 3rd E-mail
\par 
\par }{
\par }\pard\plain \qc \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\sect }\sectd \psz1\sbknone\linex0\cols2\colsx475\endnhere\sectdefaultcl \pard\plain 
\qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\fs24 ABSTRACT}{
\par }\pard\plain \s23\ql \li0\ri0\sb40\sa120\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {\b0\fs18 
The Biopython project was formed in August 1999 as a collaboration to coll
ect and produce open source bioinformatics tools written in Python, an object-oriented scripting language.  It is modeled on the highly successful Bioperl project, but has the goal of making libraries available for people doing computations in Python.  Th
e
 philosophy of all the Bio* projects is that part of bioinformaticists' work involves software development.  In order to prevent repeated efforts we believe that the field can be advanced more quickly if libraries that perform common programming functions
 were available. Thus, we hope to create a central source for high-quality bioinformatics tools that researchers can use. 
\par }\pard \s23\ql \li0\ri0\sb40\sa120\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b0\fs18 As an open source project, Biopython can be downloaded for free from the web site at }{\field\flddirty{\*\fldinst {\b0\fs18 
 HYPERLINK "http://www.biopython.org" }{\fs18 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000001900000068007400740070003a002f002f007700770077002e00620069006f0070007900740068006f006e002e006f00720067000000e0c9ea79f9bace118c8200aa004ba90b3400000068007400740070003a002f002f007700770077002e00620069006f00
70007900740068006f006e002e006f00720067002f000000}}}{\fldrslt {\cs31\fs18\ul\cf2 http://www.biopython.org}}}{\b0\fs18 
. Biopython libraries are currently under heavy development. This paper describes the current state of available Biopython tools, shows examples of their use in common bioinformatics problems, and describes plans for future development.}{\b0 
\par }\pard\plain \qj \li0\ri0\sb120\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\fs24 Keywords
\par }{Python, bioinformatics, computational biology
\par {\listtext\pard\plain\s1 \b\kerning28 \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard\plain \s1\ql \li0\ri0\sb120\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {INTRODUCTION
\par }\pard\plain \s28\qj \li0\ri0\sa120\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Development of software tools is one of the most time consuming aspects of the work done by a bioinformaticist. A successful solution to this problem has been the establishment of common rep
ositories of interworking open-source libraries. This solution not only saves development time for researchers, but also leads to more robust, well-tested code due to the contributions of multiple developers on the project. The ideas behind open source co
l
laborative software have been explored through a series of essays by Eric Raymond [1]. One example where the open source methodology has been successfully applied is the Bioperl project [2]. Similarly, Biopython seeks to develop and collect biologically o
riented code written in python [3].
\par Python is an object-oriented scripting language that is well suited for processing text files and automating common tasks. Because it was designed from the ground up with an object-oriented framework, it also scales well 
and can be utilized for large projects.  Python is portable to multiple platforms including multiple UNIX variants, Windows, and Macintosh. The standard library comes with many high-level data structures such as dictionaries, and contains numerous built i
n modules to accomplish tasks from parsing with regular expressions to implementing a http server.
\par The native python libraries interface well with C, so after initial development in python, computationally expensive operations can be recoded in C to increas
e program speed. In addition, jpython [4], an implementation of python in pure java, allows python to freely interact with java libraries.  The options allow rapid development in python, followed by deployment in other languages, if desired.
\par A library of common code for biological analysis is essential to allow bioinformaticists to take advantage of all of the benefits of programming in python. This paper describes work towards development of such a library.
\par {\listtext\pard\plain\s1 \b\kerning28 \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard\plain \s1\ql \li0\ri0\sb120\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {PARSERS FOR BIOLOGICAL DATA
\par {\listtext\pard\plain\s2 \b\kerning28 \hich\af0\dbch\af0\loch\f0 2.1\tab}}\pard\plain \s2\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl1\outlinelevel1\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Design Goals
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The most
 fundamental need of a bioinformaticist is the ability to import biological data into a form usable by computer programs. Thus, much of the initial development of Biopython has been focused on writing code that can retrieve data from common biological dat
abases and parse them into a python data structure.
\par Designing parsers for bioinformatics file formats is particularly difficult because of the frequency at which the data formats change. This is partially because of inadequate curation of the structure of t
he data, and also because of changes in the contents of the database. Biopython addresses these difficulties through the use of standard event-oriented parser design.
\par Then event-oriented nature of biopython parsers are similar to that utilized by the SAX (
Simple API for XML) parser interface, which is used for parsing XML data files. They are different then SAX in that they are line-oriented; since nearly all biological data formats use lines as meaningful delimiters biological parsers can be built based o
n the assumption that line breaks are meaningful. A parser involves two components: a Scanner, whose job is to recognize and identify lines that contain meaningful information, and a Consumer, which extracts the information from the line.
\par The Scanner does most of the difficult work in dealing with the parsing. It is required to move through a file and send out \'93events\'94
 whenever an item of interest in encountered in the file. These events are the key pieces of data in the file that a user would be interested 
in extracting. For instance, lets imagine we were parsing a FASTA formatted file with the following sequence info (cut so the lines fit nicely):
\par }{\f1\fs16 >gi|8980811|gb|AF267980.1|AF267980 Stenocactus crispatus\'85
\par AAAGAAAAATATACATTAAAAGAAGGGGATGCGGG\'85}{
\par }\pard\plain \s21\qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {As the scanner m
oved through this file, it would fire off 4 different types of events. Upon reaching a new sequence a \lquote begin_sequence\rquote  event would be sent. This would be followed by a \lquote title\rquote 
 event upon reaching the information about the sequence and a \lquote sequence\rquote  event for every line of sequence information. Finally, everything would wrap up with an \lquote end_sequence\rquote  when we have no more sequence data in the entry. 

\par Creating and emanating these events is interesting, but is not very useful unless we get some kind of informati
on from the events, which is where the Consumer component comes in. The consumer will register itself with a scanner and let it know that it wants to know about all events that occur while scanning through a file. Then, it will implement functions which d
eal with the events that it is interested in. 
\par To go back to our FASTA example, a consumer might just be interested in counting the number of sequences in a file. So, it would implement a function \lquote begin_sequence\rquote  that increments a counter by one every time
 that event occurs.  By simple receiving the information it is interested in from the Scanner, the consumer processes and deals with the files according to the programmer\rquote s needs.
\par By decoupling scanners from consumers, developers can choose different consu
mers depending on their information or performance needs, while maintaining the same scanner. It is possible to develop multiple specialized consumer-handlers using the same scanner framework.  These parsers can deal with a small subsection of the data re
l
atively easily. For example, it may be desirable to have a parser that only extracts the sequence information from a Genbank file, without having to worry about the rest of the information. This would save time by not processing unnecessary information, a
nd save memory by not storing it.
\par {\listtext\pard\plain\s2 \b\kerning28 \hich\af0\dbch\af0\loch\f0 2.2\tab}}\pard\plain \s2\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl1\outlinelevel1\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Usage Examples
\par {\listtext\pard\plain\s3 \i\fs22\kerning28 \hich\af0\dbch\af0\loch\f0 2.2.1\tab}}\pard\plain \s3\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl2\outlinelevel2\adjustright\rin0\lin0\itap0 
\i\fs22\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Usage Scenario
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\dbch\af23 \hich\af0\dbch\af23\loch\f0 
To take a look at the parsers in action, we'll look at some examples based around a common theme, to make things a little more exciting. Let's suddenly become really interested in Taxol, a nove\hich\af0\dbch\af23\loch\f0 
l anti-cancer drug [5] and use this newfound interest to frame our work.}{
\par {\listtext\pard\plain\s3 \i\fs22\kerning28 \hich\af0\dbch\af0\loch\f0 2.2.2\tab}}\pard\plain \s3\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl2\outlinelevel2\adjustright\rin0\lin0\itap0 
\i\fs22\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Extracting information from a FASTA file
\par }\pard\plain \s32\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\loch\af0\hich\af0\dbch\af23 \hich\af0\dbch\af23\loch\f0 
To start our search for Taxol information, we first head to NCBI to do an Entrez search over the Genbank nucleotide databases [6].  Just searc\hich\af0\dbch\af23\loch\f0 
hing for the keyword 'taxol' gives 22 results, so let's say we want to parse through these results and extract id numbers from those that have to do with humans. To do this, we save the search results as a FASTA file, and then proceed to parse this.

\par \hich\af0\dbch\af23\loch\f0 Based \hich\af0\dbch\af23\loch\f0 
on the scanner-consumer discussion above, what we need to do is implement a consumer which will react every time we reach a title in the FASTA file, and check to see if the title mentions anything to do with humans. The following consumer does this job:

\par 
\par }{\cs34\f1\fs16 import string
\par from Bio.ParserSupport import AbstractConsumer
\par 
\par class TitleSearchConsumer(AbstractConsumer):
\par     
\par     def title(self, line):
\par         # see if the title contains a reference to humans
\par         location = string.find(line, "Homo sapiens")
\par         if location != -1:
\par             # split the string to give us the accession number
\par             result = string.split(line, '|')
\par             print 'Accession:', result[3]
\par }{\fs18\loch\af0\hich\af0\dbch\af23 
\par \hich\af0\dbch\af23\loch\f0 The Consumer inherits from a base consumer class which ignores any sections that we a\hich\af0\dbch\af23\loch\f0 
re not interested in (like sequences). Now that we've got a consumer, we need to start up a scanner, inform it of what consumer we want to send events to, and then parse the file. The following code accomplishes this:
\par 
\par }{\cs34\f1\fs16 # set up the scanner, consumer and file to parse
\par from Bio.Fasta import Fasta
\par scanner = Fasta._Scanner()
\par consumer = TitleSearchConsumer()
\par file = open('taxol.fasta', 'r')
\par 
\par # parse all fasta records in the file
\par for n in range(22):
\par     scanner.feed(file, handler)}{\fs18\loch\af0\hich\af0\dbch\af23 
\par \hich\af0\dbch\af23\loch\f0     
\par \hich\af0\dbch\af23\loch\f0 Running this example gives t\hich\af0\dbch\af23\loch\f0 he following output:
\par 
\par }{\cs34\f1\fs16 $ python fasta_ex.py
\par Accession: AW615564.1
\par Accession: NM_004909.1
\par Accession: AF157562
\par \'85}{\fs18\loch\af0\hich\af0\dbch\af23 
\par 
\par \hich\af0\dbch\af23\loch\f0 This example uses the raw scanner-consumer interface we described above. Doing this can be clunky in many ways, since we have to explicitly know \hich\af0\dbch\af23\loch\f0 
how many records we have to parse, and also need to access the scanner, which is marked as an internal class. The reason for this is that there are layers developed on top of the raw scanner and consumer classes which help make them more intuitive to use.

\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par {\listtext\pard\plain\s3 \i\fs22\kerning28 \hich\af0\dbch\af0\loch\f0 2.2.3\tab}}\pard\plain \s3\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl2\outlinelevel2\adjustright\rin0\lin0\itap0 
\i\fs22\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Parsing Output from Swiss-Prot
\par }\pard\plain \s32\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\loch\af0\hich\af0\dbch\af23 \hich\af0\dbch\af23\loch\f0 
Delving  further into taxol  we next decide to look for further information in Swiss-Prot [7], a hand curated database of protein sequences. We search for  Taxol or Taxus (Taxol was first isolated from the bark of the pacifi\hich\af0\dbch\af23\loch\f0 
c yew, Taxus brevifolia). This  yields 15 results, which we save in SwissProt format. Next, we would like to print out a description of each of the proteins found. To do this, we use an iterator to step through each entry, and then use the SwissProt parse
\hich\af0\dbch\af23\loch\f0 r\hich\af0\dbch\af23\loch\f0  to parse each entry into a record containing all of the information in the entry.
\par \hich\af0\dbch\af23\loch\f0 First, we set up a parser and an iterator to use:
\par 
\par }{\cs34\f1\fs16 from Bio.SwissProt import SProt
\par 
\par file = open('taxol.swiss', 'r')
\par parser = SProt.RecordParser()
\par my_iterator = SProt.Iterator(file, parser)
\par }{\fs18\loch\af0\hich\af0\dbch\af23 
\par \hich\af0\dbch\af23\loch\f0 The parser is a RecordParser which converts a SwissProt entry into the record class mentioned above. Now, we can readily step through the file record by record, and print out just the descriptions from the record class:
\par 
\par }{\cs34\f1\fs16 next_record = my_iterator.next()
\par 
\par while next_record:
\par     print 'Description:', next_record.description
\par     next_record = my_iterator.next()}{\fs18\loch\af0\hich\af0\dbch\af23 
\par \hich\af0\dbch\af23\loch\f0     
\par \hich\af0\dbch\af23\loch\f0 Utilizing the iterator and record class interfaces, the code ends up being shorter and more understandable. In many cases this ap\hich\af0\dbch\af23\loch\f0 
proach will be enough to extract the information you want, while the more general Scanner and Consumer classes are always available if you need more control over how you deal with the data.}{\f0\fs18 
\par {\listtext\pard\plain\s3 \i\fs22\kerning28 \hich\af0\dbch\af0\loch\f0 2.2.4\tab}}\pard\plain \s3\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl2\outlinelevel2\adjustright\rin0\lin0\itap0 
\i\fs22\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Downloading and Extracting information from Pub-Med
\par }\pard\plain \s32\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\loch\af0\hich\af0\dbch\af23 \hich\af0\dbch\af23\loch\f0 Finally, in ou\hich\af0\dbch\af23\loch\f0 
r search for Taxol information, we would like to search PubMed [8] and get Medline articles dealing with Taxol. Biopython provides many nice interfaces for doing just this.
\par \hich\af0\dbch\af23\loch\f0 First, we would like to do a PubMed search to get a listing of all articles having \hich\af0\dbch\af23\loch\f0 to do with Taxol. We can do this with the following two lines of code:
\par 
\par }{\cs34\f1\fs16 from Bio.Medline import PubMed
\par taxol_ids = PubMed.search_for('taxol')}{\fs18\loch\af0\hich\af0\dbch\af23 
\par 
\par \hich\af0\dbch\af23\loch\f0 Of course, article ids are not much use unless we can get the Medline records. Here, we create a dictionary that \hich\af0\dbch\af23\loch\f0 
can retrieve a PubMed entry by its id, and use a Medline parser to parse the entry into a usable format. A PubMed dictionary is accessible using python dictionary semantics, in which the keys are PubMed ids, and the values are the records in Medlars forma
\hich\af0\dbch\af23\loch\f0 t\hich\af0\dbch\af23\loch\f0 .
\par 
\par }{\cs34\f1\fs16 my_parser = Medline.RecordParser()
\par medline_dict = PubMed.Dictionary(parser = my_parser)}{\fs18\loch\af0\hich\af0\dbch\af23 
\par 
\par \hich\af0\dbch\af23\loch\f0 Now that we've got what we need, we can walk through and get the information we require:
\par 
\par }{\cs34\f1\fs16 for id in taxol_ids[0:5]:
\par     this_record = medline_dict[id]
\par     print 'Title:', this_record.title
\par     print 'Authors:', this_record.authors
\par }{\fs18\loch\af0\hich\af0\dbch\af23 
\par \hich\af0\dbch\af23\loch\f0 Running this code will give output like the following:
\par }{\cs34\f1\fs16 $ python medline_ex.py
\par Title: PKC412--a protein kinase inhibitor with a broad therapeutic potential
\par [In Process Citation]
\par 
\par Authors: ['Fabbro D', 'Ruetz S', 'Bodis S', 'Pruschy M', 'Csermak K', 'Man A', 'Campochiaro P', 'Wood J', "O'Reilly T", 'Meyer T']
\par }{\cs34\fs16\loch\af1\hich\af1\dbch\af23 \loch\af1\dbch\af23\hich\f1 \'85\loch\f1 .}{\fs18\loch\af0\hich\af0\dbch\af23 
\par 
\par \hich\af0\dbch\af23\loch\f0 In this example, the Biopython classes make it easy to get PubMed information in a format that can be easily manipulated using stan\hich\af0\dbch\af23\loch\f0 
dard python tools. For instance, the authors are generated in a python list, so they could easily be searched with code like:
\par 
\par }{\cs34\fs16\loch\af1\hich\af1\dbch\af23 \hich\af1\dbch\af23\loch\f1 If \hich\f1 \lquote \loch\f1 Monty P\loch\af1\dbch\af23\hich\f1 \rquote \loch\f1   in authors:
\par \hich\af1\dbch\af23\loch\f1     print \hich\f1 \lquote \loch\f1 found author Monty P\loch\af1\dbch\af23\hich\f1 \rquote }{\fs18\loch\af0\hich\af0\dbch\af23 
\par 
\par \hich\af0\dbch\af23\loch\f0 In sum, these examples demonstrate how the Biopython classes can be\hich\af0\dbch\af23\loch\f0  used to automate common biological tasks and deal with bioinformatic data in a pythonic manner.}{\f0\fs18 
\par {\listtext\pard\plain\s1 \b\kerning28 \hich\af0\dbch\af0\loch\f0 3.\tab}}\pard\plain \s1\ql \li0\ri0\sb120\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {REPRESENTING SEQUENCES
\par {\listtext\pard\plain\s2 \b\kerning28 \hich\af0\dbch\af0\loch\f0 3.1\tab}}\pard\plain \s2\ql \li0\ri0\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl1\outlinelevel1\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Design Goals
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Sequences of biological data are ubiquitous in bioinformatics, so it is essential to develop a standard sequence representa
tion. The most natural way to think of sequences is as strings of characters, since this is the most common way they are encountered. Although this is an intuitive representation, it also very limiting, since sequences themselves have additional propertie
s
. In addition, many sequences, such as entire genomes, may be too large to fit into memory at the same time. Therefore, a critical challenge is designing the sequence interface which makes dealing with Biopython sequences as easy as dealing with strings, 
but which also allows the sequences to take on additional properties. 
\par Biopython represents sequences as a lightweight sequence class that utilizes the object oriented nature of python and makes generous use of operator overloading. This combination allows 
sequences to be easily manipulated using common string operations, while also allowing sequence objects to be directly used in more complex operations. The examples below demonstrate the utility of this approach.
\par {\listtext\pard\plain\s2 \b\kerning28 \hich\af0\dbch\af0\loch\f0 3.2\tab}}\pard\plain \s2\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl1\outlinelevel1\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Usage Examples
\par }\pard\plain \s32\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\loch\af0\hich\af0\dbch\af23 \hich\af0\dbch\af23\loch\f0 The sequence class has two i
\hich\af0\dbch\af23\loch\f0 mportant attributes: its string 
\par \hich\af0\dbch\af23\loch\f0 representation, and an Alphabet class describing the allowable characters in the sequence.  The representations we will use here are from the IUPAC nomenclature [9]. The two major advantages of this approach are that it ass
\hich\af0\dbch\af23\loch\f0 igns some rigidity and automatic error checking to your analysis, and that it allows the identity and characteristics of a sequence to be examined. 
\par \hich\af0\dbch\af23\loch\f0 You can create a sequence object very simply:}{\dbch\af23 
\par 
\par }{\cs34\f1\fs16 >>> from Bio.Seq import Seq
\par >>> from Bio.Alphabet import IUPAC
\par >>> my_seq = Seq('GCGATGCTATG', IUPAC.unambiguous_dna)}{\dbch\af23 
\par 
\par }{\fs18\loch\af0\hich\af0\dbch\af23 \hich\af0\dbch\af23\loch\f0 The my_seq object is a "Seq" object, and not just a string:
\par }{\cs34\f1\fs16 
\par >>> print my_seq
\par Seq('GCGATGCTATG', IUPACUnambiguousDNA())
\par }{\dbch\af23 
\par }{\fs18\loch\af0\hich\af0\dbch\af23 \hich\af0\dbch\af23\loch\f0 However, the string can be easily obtained as an attribute of the my_seq obj\hich\af0\dbch\af23\loch\f0 ect:
\par }{\dbch\af23 
\par }{\cs34\f1\fs16 >>> print my_seq.data
\par GCGATGCTATG}{\dbch\af23 
\par 
\par }{\fs18\loch\af0\hich\af0\dbch\af23 \hich\af0\dbch\af23\loch\f0 Additionally, you can perform common string operations like getting the length or obtaining a slice directly on the sequence object:
\par }{\dbch\af23 
\par }{\cs34\f1\fs16 >>> print len(my_seq)
\par 11
\par >>> print my_seq[3:6]
\par Seq('ATG', IUPACUnambiguousDNA())
\par >>> my_seq2 = Seq('ATATATA', IUPAC.unambiguous_dna)
\par >>> print my_seq + my_seq2
\par Seq('GCGATGCTATGATATATA', IUPACUnambiguousDNA())}{\dbch\af23 
\par 
\par }{\fs18\loch\af0\hich\af0\dbch\af23 \hich\af0\dbch\af23\loch\f0 Note that despite the fact that you are performing string operations on the sequence object, the return values are still Seq ob\hich\af0\dbch\af23\loch\f0 
jects whose attributes, such as alphabet, are preserved.
\par 
\par \hich\af0\dbch\af23\loch\f0 Although  you can deal with sequences simply in this manner, we can also do more complex operations directly on these objects. For instance, you can readily transcribe the DNA sequence into the corr\hich\af0\dbch\af23\loch\f0 
esponding RNA sequence:
\par }{\dbch\af23 
\par }{\cs34\f1\fs16 >>> from Bio.Tools import Transcribe
\par >>> my_transcriber = Transcribe.unambiguous_transcriber
\par >>> print my_transcriber.transcribe(my_seq)
\par Seq('GCGAUGCUAUG', IUPACUnambiguousRNA())
\par }{\dbch\af23 
\par }{\fs18\loch\af0\hich\af0\dbch\af23 \hich\af0\dbch\af23\loch\f0 Similarly, we can do translations using a number of\hich\af0\dbch\af23\loch\f0  different codon tables. Here, we will use the standard codon table to do the translation of our small sequence:

\par }{\dbch\af23 
\par }{\cs34\f1\fs16 >>> from Bio.Tools import Translate
\par >>> my_translator = Translat}{\cs34\fs16\loch\af1\hich\af1\dbch\af23 \hich\af1\dbch\af23\loch\f1 e.unambiguous_dna_by_name['SGC0\hich\f1 \rquote }{\cs34\f1\fs16 ]
\par >>> print my_translator.translate(my_seq)
\par Seq('AML', IUPACProtein())}{\dbch\af23 
\par 
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\dbch\af23 \hich\af0\dbch\af23\loch\f0 
Hopefully, these examples give a taste for the way you can interact with sequences through Biopython, and show the utility of this approach.}{
\par 
\par {\listtext\pard\plain\s1 \b\kerning28 \hich\af0\dbch\af0\loch\f0 4.\tab}}\pard\plain \s1\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Other Tools
\par {\listtext\pard\plain\s2 \b\kerning28 \hich\af0\dbch\af0\loch\f0 4.1\tab}}\pard\plain \s2\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl1\outlinelevel1\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Biocorba interface
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Because each programming language has its own advantages 
and disadvantages, one important goal is to achieve a degree of interoperability between libraries in different languages. A natural choice for helping to achieve this goal is the Common Object Request Broker Architecture (CORBA) [10], a set of specificat
ions which allows code written in different languages to interoperate freely, even for programs running on different machines.
\par Taking advantage of CORBA, the Bioperl, Biojava and Biopython projects collaborated to develop an interface description allowing t
he projects to inter-communicate. Written in the interface definition language (IDL) of CORBA, it defines sequences with features, as well as methods to operate on those features.
\par Biopython has developed a module referred to as biopython-corba, which allow
s biopython to communicate with implementations of the biocorba interface written in perl and java. This allows python programmers to take advantage of code written in the other languages, and also allows the sharing of results and programs between resear
chers at different locations.
\par Biopython-corba also contains experimental modules for interacting with other biological CORBA servers. The European Bioinformatics Institute (EBI) has a number of biological database running with CORBA interfaces [11]. Accessi
ng databases through CORBA can be quicker and more flexible then using web based interfaces. Due to the wide support for CORBA in python (there are currently 4 different Object Request Brokers (ORBs) with python interfaces), we believe that biopython-corb
a can be an important resource for bioinformatics programmers.
\par 
\par {\listtext\pard\plain\s2 \b\kerning28 \hich\af0\dbch\af0\loch\f0 4.2\tab}}\pard\plain \s2\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl1\outlinelevel1\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Classification Tools
\par }\pard\plain \s21\qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\dbch\af23 \hich\af0\dbch\af23\loch\f0 
Biopython also contains tools which implement common classification (supervised machine learning) algorithms, which are generally usable for any task which involves separat\hich\af0\dbch\af23\loch\f0 
ing data into distinct groups. Currently, these type of algorithms are widely applied in analysis of microarray data, where researchers often want to separate genes into distinct groups based on their expression patterns. Currently, three different superv
\hich\af0\dbch\af23\loch\f0 i\hich\af0\dbch\af23\loch\f0 
sed classification algorithms are implemented in Biopython: Support Vector Machines, Naive Bayes, and k-Nearer-Neighbors. These tools are designed to be easy to get started with and contain 'train' functions which allow you to utilize default training alg
\hich\af0\dbch\af23\loch\f0 o\hich\af0\dbch\af23\loch\f0 rithms in a quick analysis. However, they also contain interfaces for implementing custom training functions, so they are usable by advanced users.}{ 
\par {\listtext\pard\plain\s2 \b\kerning28 \hich\af0\dbch\af0\loch\f0 4.3\tab}}\pard\plain \s2\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl1\outlinelevel1\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Additional Functionality
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {In addition to all of the modules mentioned here, Biopython also contains parsers 
for dealing with data generated from BLAST [12], Enzyme [13], Prosite [14],  and SCOP [15]. Additionally, code exists for directly accessing popular bioinformatics web services, allowing access to these services directly from python scripts.
\par {\listtext\pard\plain\s1 \b\kerning28 \hich\af0\dbch\af0\loch\f0 5.\tab}}\pard\plain \s1\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Future Goals
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {A
s mentioned, Biopython is still under heavy development, and has many exciting upcoming plans. In a true open-source nature, the code is always available for scrutiny in publicly accessible CVS archives, and discussions occur regularly on several list ser
ves. 
\par {\listtext\pard\plain\s2 \b\kerning28 \hich\af0\dbch\af0\loch\f0 5.1\tab}}\pard\plain \s2\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl1\outlinelevel1\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Planned Features
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Biopython has numerous projects which are planned for the future., including:
\par {\listtext\pard\plain\fs18 \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \qj \fi-360\li720\ri0\sa80\widctlpar\jclisttab\tx720\aspalpha\aspnum\faauto\ls3\adjustright\rin0\lin720\itap0 {
Parsers for even more biological sequence formats, including Genbank and PDB formats
\par {\listtext\pard\plain\fs18 \hich\af0\dbch\af0\loch\f0 2.\tab}Code for dealing with Sequence Annotations. Many useful features of seq
uences can be identified using computational tools, and being able to manipulate these annotations in Biopython would be very useful.
\par {\listtext\pard\plain\fs18 \hich\af0\dbch\af0\loch\f0 3.\tab} Development of a graphical user interface which makes using the Biopython libraries easy for non-programmers.  Prototypes for this currently exist, but much more is still planned.
\par {\listtext\pard\plain\fs18 \hich\af0\dbch\af0\loch\f0 4.\tab}
Further interaction with CORBA. CORBA is being utilitized more frequently in bioinformatics projects, and python has a number of well supported CORBA interfaces. This combination makes biopython an
 ideal place to collect CORBA code dealing with biological objects.
\par {\listtext\pard\plain\s2 \b\kerning28 \hich\af0\dbch\af0\loch\f0 5.2\tab}}\pard\plain \s2\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\ilvl1\outlinelevel1\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Contact Information
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The Biopython project has a home page at }{\field{\*\fldinst { HYPERLINK "http://www.biopython.org" }{
{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000001900000068007400740070003a002f002f007700770077002e00620069006f0070007900740068006f006e002e006f00720067000000e0c9ea79f9bace118c8200aa004ba90b3400000068007400740070003a002f002f007700770077002e00620069006f00
70007900740068006f006e002e006f00720067002f000000}}}{\fldrslt {\cs31\ul\cf2 http://www.biopython.org}}}{. This page contains the biopython mailing lists, CVS archive
s and releases of the code available for download, as well as links to other freely available python code for biological analysis. There are no barriers to joining the development team, and we are always looking for people to contribute ideas, code or dis
cussions.
\par 
\par {\listtext\pard\plain\s1 \b\kerning28 \hich\af0\dbch\af0\loch\f0 6.\tab}}\pard\plain \s1\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Conclusions
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
This paper described the Biopython project, which seeks to collect and organize freely available python code that deals with biological data.  It detailed the unique aspects of python which make it an extremely useful language to work
ing in bioinformatics. Code examples illustrated the design and use of several biopython modules, and other tools were more briefly described. Some upcoming plans for the project are also listed to give an indication of the directions that Biopython is he
aded.  Biopython provides an important resource for the development of bioinformatics tools in python, and we hope to have excited you enough to give it a try, or maybe even volunteer to help!
\par {\listtext\pard\plain\s1 \b\kerning28 \hich\af0\dbch\af0\loch\f0 7.\tab}}\pard\plain \s1\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Acknowledgements
\par }\pard\plain \qj \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Many thanks to all of the contributors to Biopy
thon, especially Andrew Dalke and Cayte Lindner, and to Chris Dagdigian for setting up and maintaing the web site, mailing lists and bug tracking system. Brad Chapman is supported by a Howard Hughes Medical Institute Predoctoral Fellowship. 
\par {\listtext\pard\plain\s1 \b\kerning28 \hich\af0\dbch\af0\loch\f0 8.\tab}}\pard\plain \s1\ql \li0\ri0\sb40\keepn\widctlpar\aspalpha\aspnum\faauto\ls1\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {Referemces
\par }\pard\plain \ql \li0\ri0\sa80\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {[1] }{\field{\*\fldinst { HYPERLINK "http://www.tuxedo.org/~esr/writings/" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000002500000068007400740070003a002f002f007700770077002e00740075007800650064006f002e006f00720067002f007e006500730072002f00770072006900740069006e00670073002f000000e0c9ea79f9bace118c8200aa004ba90b4a00000068007400
740070003a002f002f007700770077002e00740075007800650064006f002e006f00720067002f007e006500730072002f00770072006900740069006e00670073002f000000}}}{\fldrslt {\cs31\ul\cf2 http://www.tuxedo.org/~esr/writings/}}}{
\par [2] }{\field\flddirty{\*\fldinst { HYPERLINK "http://www.bioperl.org" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000001700000068007400740070003a002f002f007700770077002e00620069006f007000650072006c002e006f00720067000000e0c9ea79f9bace118c8200aa004ba90b3000000068007400740070003a002f002f007700770077002e00620069006f0070006500
72006c002e006f00720067002f000000}}}{\fldrslt {\cs31\ul\cf2 http://www.bioperl.org}}}{
\par [3] }{\field\flddirty{\*\fldinst { HYPERLINK "http://www.python.org" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000001600000068007400740070003a002f002f007700770077002e0070007900740068006f006e002e006f00720067000000e0c9ea79f9bace118c8200aa004ba90b2e00000068007400740070003a002f002f007700770077002e0070007900740068006f006e00
2e006f00720067002f000000}}}{\fldrslt {\cs31\ul\cf2 http://www.python.org}}}{
\par [4] }{\field\flddirty{\*\fldinst { HYPERLINK "http://www.jpython.org" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000001700000068007400740070003a002f002f007700770077002e006a0070007900740068006f006e002e006f00720067000000e0c9ea79f9bace118c8200aa004ba90b3000000068007400740070003a002f002f007700770077002e006a007000790074006800
6f006e002e006f00720067002f000000}}}{\fldrslt {\cs31\ul\cf2 http://www.jpython.org}}}{
\par [5] A good quick introduction to Taxol can be found at: }{\cs31\ul\cf2\dbch\af23 \hich\af0\dbch\af23\loch\f0 http://www.bris.ac.uk/Depts/Chemistry/MOTM/taxol/taxol.htm}{
\par [6] }{\cs31\ul\cf2\dbch\af23 \hich\af0\dbch\af23\loch\f0 http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Nucleotide}{\dbch\af23 
\par \hich\af0\dbch\af23\loch\f0 [7] }{\field\flddirty{\*\fldinst {\dbch\af23 \hich\af0\dbch\af23\loch\f0  HYPERLINK "http://www.expasy.ch/spro\hich\af0\dbch\af23\loch\f0 t/sprot-top.html" }{\dbch\af23 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000002a00000068007400740070003a002f002f007700770077002e006500780070006100730079002e00630068002f007300700072006f0074002f007300700072006f0074002d0074006f0070002e00680074006d006c000000e0c9ea79f9bace118c8200aa004b
a90b5400000068007400740070003a002f002f007700770077002e006500780070006100730079002e00630068002f007300700072006f0074002f007300700072006f0074002d0074006f0070002e00680074006d006c000000}}}{\fldrslt {\cs31\ul\cf2\dbch\af23 \hich\af0\dbch\af23\loch\f0 
http://www.expasy.ch/sprot/sprot-top.html}}}{\dbch\af23 
\par \hich\af0\dbch\af23\loch\f0 [8]}{\cs31\ul\cf2\dbch\af23 \hich\af0\dbch\af23\loch\f0 http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?db=PubMed}{\dbch\af23 
\par \hich\af0\dbch\af23\loch\f0 [9] }{\field{\*\fldinst {\dbch\af23 \hich\af0\dbch\af23\loch\f0  HYPERLINK "http://www.chem.qmw.ac.uk/iupac/" }{\dbch\af23 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000002100000068007400740070003a002f002f007700770077002e006300680065006d002e0071006d0077002e00610063002e0075006b002f00690075007000610063002f000000e0c9ea79f9bace118c8200aa004ba90b4200000068007400740070003a002f00
2f007700770077002e006300680065006d002e0071006d0077002e00610063002e0075006b002f00690075007000610063002f000000}}}{\fldrslt {\cs31\ul\cf2\dbch\af23 \hich\af0\dbch\af23\loch\f0 http://www.chem.qmw.ac.uk/iupac/}}}{\dbch\af23 \hich\af0\dbch\af23\loch\f0  

\par \hich\af0\dbch\af23\loch\f0 [10] }{\field{\*\fldinst { HYPERLINK "http://www.corba.org" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000001500000068007400740070003a002f002f007700770077002e0063006f007200620061002e006f00720067000000e0c9ea79f9bace118c8200aa004ba90b2c00000068007400740070003a002f002f007700770077002e0063006f007200620061002e006f00
720067002f000000}}}{\fldrslt {\cs31\ul\cf2 http://www.corba.org}}}{
\par [11] }{\field{\*\fldinst { HYPERLINK "http://corba.ebi.ac.uk/index.html" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000002200000068007400740070003a002f002f0063006f007200620061002e006500620069002e00610063002e0075006b002f0069006e006400650078002e00680074006d006c000000e0c9ea79f9bace118c8200aa004ba90b4400000068007400740070003a00
2f002f0063006f007200620061002e006500620069002e00610063002e0075006b002f0069006e006400650078002e00680074006d006c000000}}}{\fldrslt {\cs31\ul\cf2 http://corba.ebi.ac.uk/index.html}}}{
\par [12] http://www.ncbi.nlm.nih.gov/BLAST/
\par [13] http://www.expasy.ch/enzyme/
\par [14] http://www.expasy.ch/prosite/
\par [15] http://scop.mrc-lmb.cam.ac.uk/scop/\sect }\sectd \psz1\sbknone\linex0\endnhere\sectdefaultcl \pard\plain \s17\qc \li0\ri0\sa120\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\f5\fs36\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
{
\par Columns on Last Page Should Be Made As Close As Possible to Equal Length
\par }}